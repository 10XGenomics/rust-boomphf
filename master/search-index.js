var N = null;var searchIndex = {};
searchIndex["boomphf"]={"doc":"boomphf - Fast and scalable minimal perfect hashing for massive key sets A Rust implementation of the BBHash method for constructing minimal perfect hash functions, as described in \"Fast and scalable minimal perfect hashing for massive key sets\" https://arxiv.org/abs/1702.03154. The library generates a minimal perfect hash function (MPHF) for a collection of hashable objects. Note: minimal perfect hash functions can only be used with the set of objects used when hash function was created. Hashing a new object will return an arbitrary hash value. If your use case may result in hashing new values, you will need an auxiliary scheme to detect this condition.","items":[[3,"Mphf","boomphf","A minimal perfect hash function over a set of objects of type `T`.",N,N],[0,"hashmap","","HashMap data structures, using MPHFs to encode the position of each key in a dense array.",N,N],[3,"BoomHashMap","boomphf::hashmap","A HashMap data structure where the mapping between keys and values is encoded in a Mphf. This lets us store the keys and values in dense arrays, with ~3 bits/item overhead in the Mphf.",N,N],[3,"BoomIterator","","Iterate over key-value pairs in a BoomHashMap",N,N],[3,"BoomHashMap2","","A HashMap data structure where the mapping between keys and 2 values is encoded in a Mphf. You should usually use `BoomHashMap` with a tuple/struct value type. If the layout overhead of the struct / tuple must be avoided, this variant of is an alternative. This lets us store the keys and values in dense arrays, with ~3 bits/item overhead in the Mphf.",N,N],[3,"Boom2Iterator","","",N,N],[3,"NoKeyBoomHashMap","","A HashMap data structure where the mapping between keys and values is encoded in a Mphf. Keys are not stored - this can greatly improve the memory consumption, but can only be used if you can guarantee that you will only query for keys that were in the original set.  Querying for a new key will return a random value, silently.",N,N],[12,"mphf","","",0,N],[12,"values","","",0,N],[3,"NoKeyBoomHashMap2","","A HashMap data structure where the mapping between keys and values is encoded in a Mphf. Keys are not stored - this can greatly improve the memory consumption, but can only be used if you can guarantee that you will only query for keys that were in the original set.  Querying for a new key will return a random value, silently.",N,N],[12,"mphf","","",1,N],[12,"values","","",1,N],[12,"aux_values","","",1,N],[11,"new","","Create a new hash map from the parallel array `keys` and `values`",2,[[["vec"],["vec"]],["boomhashmap"]]],[11,"get","","Get the value associated with `key`, if available, otherwise return None",2,[[["self"],["k"]],["option"]]],[11,"get_key_id","","Get the position in the Mphf of a key, if the key exists.",2,[[["self"],["k"]],["option",["usize"]]]],[11,"len","","Total number of key/value pairs",2,[[["self"]],["usize"]]],[11,"get_key","","",2,[[["self"],["usize"]],["option"]]],[11,"iter","","",2,[[["self"]],["boomiterator"]]],[11,"new_parallel","","Create a new hash map from the parallel array `keys` and `values`, using a parallelized method to construct the Mphf.",2,[[["vec"],["vec"]],["boomhashmap"]]],[11,"new","","Create a new hash map from the parallel arrays `keys` and `values`, and `aux_values`",3,[[["vec"],["vec"],["vec"]],["boomhashmap2"]]],[11,"get","","",3,[[["self"],["k"]],["option"]]],[11,"get_key_id","","",3,[[["self"],["k"]],["option",["usize"]]]],[11,"len","","",3,[[["self"]],["usize"]]],[11,"iter","","",3,[[["self"]],["boom2iterator"]]],[11,"get_key","","",3,[[["self"],["usize"]],["option"]]],[11,"new_parallel","","Create a new hash map from the parallel arrays `keys` and `values`, and `aux_values`, using a parallel algorithm to construct the Mphf.",3,[[["vec"],["vec"],["vec"]],["boomhashmap2"]]],[11,"new_parallel","","",0,[[["vec"],["vec"]],["nokeyboomhashmap"]]],[11,"new_with_mphf","","",0,[[["mphf"],["vec"]],["nokeyboomhashmap"]]],[11,"get","","Get the value associated with `key`, if available, otherwise return None",0,[[["self"],["k"]],["option"]]],[11,"new_parallel","","",1,[[["vec"],["vec"],["vec"]],["nokeyboomhashmap2"]]],[11,"new_with_mphf","","",1,[[["mphf"],["vec"],["vec"]],["nokeyboomhashmap2"]]],[11,"get","","Get the value associated with `key`, if available, otherwise return None",1,[[["self"],["k"]],["option"]]],[8,"FastIterator","boomphf","Trait for iterators that can skip values efficiently if the client knows they aren't needed.",N,N],[10,"skip_next","","Skip the next item in the iterator, without returning it.",4,[[["self"]]]],[11,"new","","Generate a minimal perfect hash function for the set of `objects`. `objects` must not contain any duplicate items. `gamma` controls the tradeoff between the construction-time and run-time speed, and the size of the datastructure representing the hash function. See the paper for details. `max_iters` - None to never stop trying to find a perfect hash (safe if no duplicates).",5,[[["f64"],["vec"]],["mphf"]]],[11,"hash","","Compute the hash value of `item`. This method should only be used with items known to be in construction set. Use `try_hash` if you cannot guarantee that `item` was in the construction set. If `item` was not present in the construction set this function may panic.",5,[[["self"],["t"]],["u64"]]],[11,"try_hash","","Compute the hash value of `item`. If `item` was not present in the set of objects used to construct the hash function, the return value will an arbitrary value Some(x), or None.",5,[[["self"],["t"]],["option",["u64"]]]],[11,"new_parallel","","Same as `new`, but parallelizes work on the rayon default Rayon threadpool. Configure the number of threads on that threadpool to control CPU usage.",5,[[["f64"],["vec"],["option",["u64"]]],["mphf"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","boomphf::hashmap","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"into_iter","","",6,[[["self"]],["i"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"par_bridge","","",6,[[["self"]],["iterbridge"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"into_iter","","",7,[[["self"]],["i"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"par_bridge","","",7,[[["self"]],["iterbridge"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"next","","",7,[[["self"]],["option"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","boomphf","",5,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"NoKeyBoomHashMap"],[3,"NoKeyBoomHashMap2"],[3,"BoomHashMap"],[3,"BoomHashMap2"],[8,"FastIterator"],[3,"Mphf"],[3,"BoomIterator"],[3,"Boom2Iterator"]]};
initSearch(searchIndex);
